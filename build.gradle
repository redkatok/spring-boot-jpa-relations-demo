plugins {
    id 'org.springframework.boot' version '2.7.5'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'java'
    id "jacoco"
    id "org.sonarqube" version "${sonarQubeVersion}"

}

group = 'io.katkov'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

bootRun {
    environment SPRING_PROFILES_ACTIVE: environment.SPRING_PROFILES_ACTIVE ?: 'local'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-validation')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation 'org.liquibase:liquibase-core'

    implementation('org.springdoc:springdoc-openapi-ui:1.6.12')

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    runtimeOnly('org.postgresql:postgresql')

    compileOnly('org.projectlombok:lombok')
    annotationProcessor('org.projectlombok:lombok')
    testCompileOnly('org.projectlombok:lombok')
    testAnnotationProcessor('org.projectlombok:lombok')

    implementation "org.mapstruct:mapstruct:${MAPSTRUCT_VERSION}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${MAPSTRUCT_VERSION}"
    testImplementation "org.mapstruct:mapstruct:${MAPSTRUCT_VERSION}"
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:${MAPSTRUCT_VERSION}"

    testImplementation "org.junit.jupiter:junit-jupiter:${JUNIT_JUPITER_VERSION}"

    implementation platform('org.testcontainers:testcontainers-bom:1.17.5') //import bom
    testImplementation('org.testcontainers:postgresql')

    testImplementation "com.github.database-rider:rider-junit5:${DATABASE_RIDER_JUNIT_JUPITER_VERSION}"
    testImplementation "com.github.gavlyukovskiy:p6spy-spring-boot-starter:${P6SPY_SPRING_BOOT_STARTER}"

    implementation("com.vladmihalcea:hibernate-types-52:2.20.0")
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
        xml.destination file("${buildDir}/jacoco/xml/jacoco.xml")
        html.destination file("${buildDir}/jacoco/html")
    }
    dependsOn test
}

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.exclusions", "**/Application.java, **/dto/**"
        property "sonar.java.source", "${project.sourceCompatibility}"
        property "sonar.java.target", "${project.targetCompatibility}"
        property "sonar.junit.reportsPath", "${buildDir}/reports/tests"
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/jacoco/xml/jacoco.xml"
    }
}
tasks.sonarqube.dependsOn test